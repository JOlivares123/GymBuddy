{"ast":null,"code":"var _jsxFileName = \"/Users/jacobolivares/Documents/practice/gym_buddy/src/routes/Workout/WorkoutPage.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { PerformWorkout, Rest, SelectDay, SelectProgram, SelectWorkout } from \"./components\";\n// mock data until backend is built\nimport { data } from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const WorkoutPage = _ref => {\n  _s();\n  let {\n    programs = data.programs\n  } = _ref;\n  const [step, setStep] = useState(1);\n  // used to keep track how many sets have been performed throughout workout\n  // const [numSets, setNumSets] = useState(0);\n  const [selectedProgram, setSelectedProgram] = useState(null);\n  // gets set in 1st step then used(read) in second step.\n  const [selectedProgramDayTitles, setSelectedProgramDayTitles] = useState([]);\n  const [selectedDay, setSelectedDay] = useState(null);\n  // const [selectedWorkout, setSelectedWorkout] = useState(null);\n  const [completedWorkouts, setCompletedWorkouts] = useState([]);\n  const selectProgram = programId => {\n    var selected = programs.filter(program => {\n      return program.id === programId;\n    }).pop();\n    setSelectedProgram(selected);\n  };\n  const nextStep = () => {\n    setStep(step + 1);\n  };\n  const prevStep = () => {\n    if (step > 1) {\n      setStep(step - 1);\n    }\n  };\n  const renderCurrentStep = () => {\n    switch (step) {\n      case 1:\n        return /*#__PURE__*/_jsxDEV(SelectProgram, {\n          next: nextStep,\n          selectProgram: selectProgram,\n          myPrograms: programs,\n          setSelectedProgramDayTitles: setSelectedProgramDayTitles\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this);\n      case 2:\n        return /*#__PURE__*/_jsxDEV(SelectDay, {\n          program: selectedProgram,\n          setSelectedProgram: setSelectedProgram,\n          next: nextStep,\n          prev: prevStep,\n          selectedProgramDayTitles: selectedProgramDayTitles,\n          setSelectedProgramDayTitles: setSelectedProgramDayTitles,\n          setSelectedDay: setSelectedDay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this);\n      case 3:\n        return /*#__PURE__*/_jsxDEV(SelectWorkout, {\n          selectedDay: selectedDay,\n          next: nextStep,\n          prev: prevStep,\n          completedWorkouts: completedWorkouts,\n          setCompletedWorkouts: setCompletedWorkouts,\n          setSelectedDay: setSelectedDay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this);\n      case 4:\n        return /*#__PURE__*/_jsxDEV(Rest, {\n          next: nextStep,\n          prev: prevStep,\n          step: step\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 16\n        }, this);\n      case 5:\n        return /*#__PURE__*/_jsxDEV(PerformWorkout, {\n          next: nextStep,\n          prev: prevStep,\n          step: step\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 16\n        }, this);\n      default:\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: renderCurrentStep(programs)\n  }, void 0, false);\n};\n_s(WorkoutPage, \"YYgt72N87QUYvNltmLSv/NXkAcc=\");\n_c = WorkoutPage;\nWorkoutPage.propTypes = {\n  programs: PropTypes.array\n};\nvar _c;\n$RefreshReg$(_c, \"WorkoutPage\");","map":{"version":3,"names":["useState","PropTypes","PerformWorkout","Rest","SelectDay","SelectProgram","SelectWorkout","data","jsxDEV","_jsxDEV","Fragment","_Fragment","WorkoutPage","_ref","_s","programs","step","setStep","selectedProgram","setSelectedProgram","selectedProgramDayTitles","setSelectedProgramDayTitles","selectedDay","setSelectedDay","completedWorkouts","setCompletedWorkouts","selectProgram","programId","selected","filter","program","id","pop","nextStep","prevStep","renderCurrentStep","next","myPrograms","fileName","_jsxFileName","lineNumber","columnNumber","prev","children","_c","propTypes","array","$RefreshReg$"],"sources":["/Users/jacobolivares/Documents/practice/gym_buddy/src/routes/Workout/WorkoutPage.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  PerformWorkout,\n  Rest,\n  SelectDay,\n  SelectProgram,\n  SelectWorkout,\n} from \"./components\";\n// mock data until backend is built\nimport { data } from \"./data\";\n\nexport const WorkoutPage = ({ programs = data.programs }) => {\n  const [step, setStep] = useState(1);\n  // used to keep track how many sets have been performed throughout workout\n  // const [numSets, setNumSets] = useState(0);\n  const [selectedProgram, setSelectedProgram] = useState(null);\n  // gets set in 1st step then used(read) in second step.\n  const [selectedProgramDayTitles, setSelectedProgramDayTitles] = useState([]);\n  const [selectedDay, setSelectedDay] = useState(null);\n  // const [selectedWorkout, setSelectedWorkout] = useState(null);\n  const [completedWorkouts, setCompletedWorkouts] = useState([]);\n\n  const selectProgram = (programId) => {\n    var selected = programs\n      .filter((program) => {\n        return program.id === programId;\n      })\n      .pop();\n\n    setSelectedProgram(selected);\n  };\n\n  const nextStep = () => {\n    setStep(step + 1);\n  };\n\n  const prevStep = () => {\n    if (step > 1) {\n      setStep(step - 1);\n    }\n  };\n\n  const renderCurrentStep = () => {\n    switch (step) {\n      case 1:\n        return (\n          <SelectProgram\n            next={nextStep}\n            selectProgram={selectProgram}\n            myPrograms={programs}\n            setSelectedProgramDayTitles={setSelectedProgramDayTitles}\n          />\n        );\n      case 2:\n        return (\n          <SelectDay\n            program={selectedProgram}\n            setSelectedProgram={setSelectedProgram}\n            next={nextStep}\n            prev={prevStep}\n            selectedProgramDayTitles={selectedProgramDayTitles}\n            setSelectedProgramDayTitles={setSelectedProgramDayTitles}\n            setSelectedDay={setSelectedDay}\n          />\n        );\n      case 3:\n        return (\n          <SelectWorkout\n            selectedDay={selectedDay}\n            next={nextStep}\n            prev={prevStep}\n            completedWorkouts={completedWorkouts}\n            setCompletedWorkouts={setCompletedWorkouts}\n            setSelectedDay={setSelectedDay}\n          />\n        );\n      case 4:\n        return <Rest next={nextStep} prev={prevStep} step={step} />;\n      case 5:\n        return <PerformWorkout next={nextStep} prev={prevStep} step={step} />;\n      default:\n    }\n  };\n  return <>{renderCurrentStep(programs)}</>;\n};\n\nWorkoutPage.propTypes = {\n  programs: PropTypes.array,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}