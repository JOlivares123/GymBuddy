{"ast":null,"code":"var _jsxFileName = \"/Users/jacobolivares/Documents/practice/gym_buddy/src/routes/Workout/WorkoutPage.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { PerformWorkout, Rest, SelectDay, SelectProgram, SelectWorkout, TimerMode } from \"./steps\";\n// mock data until backend is built\nimport { data } from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const WorkoutPage = _ref => {\n  _s();\n  let {\n    programs = data.programs\n  } = _ref;\n  // TODO: create state var that will hold log info to post to DB\n  // const [logData, setLogData] = useState(null);\n  const [step, setStep] = useState(1);\n  // used to keep track how many sets have been performed throughout workout\n  // const [numSets, setNumSets] = useState(0);\n  const [selectedProgram, setSelectedProgram] = useState(null);\n  const [restTime, setRestTime] = useState(0);\n  // gets set in 1st step then used(read) in second step.\n  const [selectedProgramDayTitles, setSelectedProgramDayTitles] = useState([]);\n  const [selectedDay, setSelectedDay] = useState(null);\n  const [selectedWorkout, setSelectedWorkout] = useState(null);\n  const [currentWorkoutSets, setCurrentWorkoutSets] = useState(0);\n  const [completedWorkouts, setCompletedWorkouts] = useState([]);\n  const [isCardio, setIsCardio] = useState(false);\n  const selectProgram = programId => {\n    var selected = programs.filter(program => {\n      return program.id === programId;\n    }).pop();\n    // extract restTime from selectedProgram + convert rest_duration from\n    // rest time in seconds\n    setRestTime(selected.rest_duration);\n    setSelectedProgram(selected);\n  };\n  const nextStep = () => {\n    setStep(step + 1);\n  };\n  const prevStep = function () {\n    let stepsBack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    // ensures we stay in bounds of our switch case\n    if (step - stepsBack >= 1) {\n      setStep(step - stepsBack);\n    }\n  };\n  const renderCurrentStep = () => {\n    switch (step) {\n      case 1:\n        return /*#__PURE__*/_jsxDEV(SelectProgram, {\n          next: nextStep,\n          selectProgram: selectProgram,\n          myPrograms: programs,\n          setSelectedProgramDayTitles: setSelectedProgramDayTitles\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this);\n      case 2:\n        return /*#__PURE__*/_jsxDEV(SelectDay, {\n          program: selectedProgram,\n          setSelectedProgram: setSelectedProgram,\n          next: nextStep,\n          prev: prevStep,\n          selectedProgramDayTitles: selectedProgramDayTitles,\n          setSelectedProgramDayTitles: setSelectedProgramDayTitles,\n          setSelectedDay: setSelectedDay,\n          setCompletedWorkouts: setCompletedWorkouts\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this);\n      case 3:\n        return /*#__PURE__*/_jsxDEV(SelectWorkout, {\n          selectedDay: selectedDay,\n          next: nextStep,\n          prev: prevStep,\n          completedWorkouts: completedWorkouts,\n          setCompletedWorkouts: setCompletedWorkouts,\n          setSelectedDay: setSelectedDay,\n          setSelectedWorkout: setSelectedWorkout,\n          setIsCardio: setIsCardio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this);\n      case 4:\n        return /*#__PURE__*/_jsxDEV(Rest, {\n          next: nextStep,\n          prev: prevStep,\n          selectedWorkout: selectedWorkout,\n          setSelectedWorkout: setSelectedWorkout,\n          completedWorkouts: completedWorkouts,\n          setCompletedWorkouts: setCompletedWorkouts,\n          currentWorkoutSets: currentWorkoutSets,\n          setCurrentWorkoutSets: setCurrentWorkoutSets,\n          isCardio: isCardio,\n          setIsCardio: setIsCardio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this);\n      case 5:\n        return /*#__PURE__*/_jsxDEV(PerformWorkout, {\n          next: nextStep,\n          prev: prevStep,\n          goal: isCardio ? selectedWorkout : selectedWorkout.goal,\n          currentWorkoutSets: currentWorkoutSets,\n          isCardio: isCardio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this);\n      case 6:\n        return /*#__PURE__*/_jsxDEV(TimerMode, {\n          prev: prevStep,\n          restTimeSecs: restTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 16\n        }, this);\n      default:\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: renderCurrentStep(programs)\n  }, void 0, false);\n};\n_s(WorkoutPage, \"y4SqZpsZDnjlRzTEgAnAtcovmfE=\");\n_c = WorkoutPage;\nWorkoutPage.propTypes = {\n  programs: PropTypes.array\n};\nvar _c;\n$RefreshReg$(_c, \"WorkoutPage\");","map":{"version":3,"names":["useState","PropTypes","PerformWorkout","Rest","SelectDay","SelectProgram","SelectWorkout","TimerMode","data","jsxDEV","_jsxDEV","Fragment","_Fragment","WorkoutPage","_ref","_s","programs","step","setStep","selectedProgram","setSelectedProgram","restTime","setRestTime","selectedProgramDayTitles","setSelectedProgramDayTitles","selectedDay","setSelectedDay","selectedWorkout","setSelectedWorkout","currentWorkoutSets","setCurrentWorkoutSets","completedWorkouts","setCompletedWorkouts","isCardio","setIsCardio","selectProgram","programId","selected","filter","program","id","pop","rest_duration","nextStep","prevStep","stepsBack","arguments","length","undefined","renderCurrentStep","next","myPrograms","fileName","_jsxFileName","lineNumber","columnNumber","prev","goal","restTimeSecs","children","_c","propTypes","array","$RefreshReg$"],"sources":["/Users/jacobolivares/Documents/practice/gym_buddy/src/routes/Workout/WorkoutPage.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  PerformWorkout,\n  Rest,\n  SelectDay,\n  SelectProgram,\n  SelectWorkout,\n  TimerMode,\n} from \"./steps\";\n// mock data until backend is built\nimport { data } from \"./data\";\n\nexport const WorkoutPage = ({ programs = data.programs }) => {\n  // TODO: create state var that will hold log info to post to DB\n  // const [logData, setLogData] = useState(null);\n  const [step, setStep] = useState(1);\n  // used to keep track how many sets have been performed throughout workout\n  // const [numSets, setNumSets] = useState(0);\n  const [selectedProgram, setSelectedProgram] = useState(null);\n  const [restTime, setRestTime] = useState(0);\n  // gets set in 1st step then used(read) in second step.\n  const [selectedProgramDayTitles, setSelectedProgramDayTitles] = useState([]);\n  const [selectedDay, setSelectedDay] = useState(null);\n  const [selectedWorkout, setSelectedWorkout] = useState(null);\n  const [currentWorkoutSets, setCurrentWorkoutSets] = useState(0);\n  const [completedWorkouts, setCompletedWorkouts] = useState([]);\n  const [isCardio, setIsCardio] = useState(false);\n\n  const selectProgram = (programId) => {\n    var selected = programs\n      .filter((program) => {\n        return program.id === programId;\n      })\n      .pop();\n    // extract restTime from selectedProgram + convert rest_duration from\n    // rest time in seconds\n    setRestTime(selected.rest_duration);\n    setSelectedProgram(selected);\n  };\n\n  const nextStep = () => {\n    setStep(step + 1);\n  };\n\n  const prevStep = (stepsBack = 1) => {\n    // ensures we stay in bounds of our switch case\n    if (step - stepsBack >= 1) {\n      setStep(step - stepsBack);\n    }\n  };\n\n  const renderCurrentStep = () => {\n    switch (step) {\n      case 1:\n        return (\n          <SelectProgram\n            next={nextStep}\n            selectProgram={selectProgram}\n            myPrograms={programs}\n            setSelectedProgramDayTitles={setSelectedProgramDayTitles}\n          />\n        );\n      case 2:\n        return (\n          <SelectDay\n            program={selectedProgram}\n            setSelectedProgram={setSelectedProgram}\n            next={nextStep}\n            prev={prevStep}\n            selectedProgramDayTitles={selectedProgramDayTitles}\n            setSelectedProgramDayTitles={setSelectedProgramDayTitles}\n            setSelectedDay={setSelectedDay}\n            setCompletedWorkouts={setCompletedWorkouts}\n          />\n        );\n      case 3:\n        return (\n          <SelectWorkout\n            selectedDay={selectedDay}\n            next={nextStep}\n            prev={prevStep}\n            completedWorkouts={completedWorkouts}\n            setCompletedWorkouts={setCompletedWorkouts}\n            setSelectedDay={setSelectedDay}\n            setSelectedWorkout={setSelectedWorkout}\n            setIsCardio={setIsCardio}\n          />\n        );\n      case 4:\n        return (\n          <Rest\n            next={nextStep}\n            prev={prevStep}\n            selectedWorkout={selectedWorkout}\n            setSelectedWorkout={setSelectedWorkout}\n            completedWorkouts={completedWorkouts}\n            setCompletedWorkouts={setCompletedWorkouts}\n            currentWorkoutSets={currentWorkoutSets}\n            setCurrentWorkoutSets={setCurrentWorkoutSets}\n            isCardio={isCardio}\n            setIsCardio={setIsCardio}\n          />\n        );\n      case 5:\n        return (\n          <PerformWorkout\n            next={nextStep}\n            prev={prevStep}\n            goal={isCardio ? selectedWorkout : selectedWorkout.goal}\n            currentWorkoutSets={currentWorkoutSets}\n            isCardio={isCardio}\n          />\n        );\n      case 6:\n        return <TimerMode prev={prevStep} restTimeSecs={restTime} />;\n      default:\n    }\n  };\n  return <>{renderCurrentStep(programs)}</>;\n};\n\nWorkoutPage.propTypes = {\n  programs: PropTypes.array,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}