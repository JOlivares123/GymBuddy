{"ast":null,"code":"var _jsxFileName = \"/Users/jacobolivares/Documents/practice/gym_buddy/src/routes/Workout/components/steps/PerformWorkout.jsx\",\n  _s = $RefreshSig$();\nimport PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport { CustButton } from \"../../../../components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CARDIO_INDEX = 0;\nexport const PerformWorkout = _ref => {\n  _s();\n  let {\n    next,\n    prev,\n    step,\n    goal,\n    currentWorkoutSets,\n    setCurrentWorkoutSets,\n    isCardio,\n    setIsCardio,\n    completedWorkouts,\n    setCompletedWorkouts,\n    setSelectedWorkout\n  } = _ref;\n  console.log(next, prev, step, goal, currentWorkoutSets, setCurrentWorkoutSets, setCompletedWorkouts, isCardio);\n  const [currReps, setCurrReps] = useState(0.0);\n  const generateGoalText = () => {\n    return isCardio ? `${(goal.duration / 60).toFixed(2)} mins` : `${goal.min_reps} - ${goal.max_reps}`;\n  };\n  const isGoalComplete = () => {\n    return currentWorkoutSets > goal.sets;\n  };\n\n  // if isCardio is true, then we send the user to the SelectWorkout page\n  // if not, then we send the user to the TimerMode page\n  const goToNextStep = () => {\n    // send user to SelectWorkout page if they finish cardio OR if they complete the goal for their workout\n    if (isCardio) {\n      // need to update selectedWorkout since it does not get updated in Rest.jsx\n      setSelectedWorkout(null);\n      // need to update isCardio state\n      setIsCardio(false);\n      // need to make cardio finished after in completedWorkouts\n      const updatedCompletedWorkouts = completedWorkouts.map((val, indx) => {\n        if (indx === CARDIO_INDEX) {\n          return true;\n        }\n        return val;\n      });\n      setCompletedWorkouts(updatedCompletedWorkouts);\n\n      // need to update currentWorkoutSets\n      setCurrentWorkoutSets(0);\n      prev(2);\n    } else if (!isCardio && isGoalComplete()) {\n      // need to update the selectedWorkout state\n      // send user to SelectWorkout step\n      prev(2);\n    }\n    // we are not done with the current workout and it's not cardio\n    else {\n      next();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-block pt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Set \", currentWorkoutSets]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"mt-3\",\n      children: [\"Goal: \", generateGoalText()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: isCardio ? \"Enter Duration\" : \"Enter Reps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: currReps,\n        onChange: e => setCurrReps(e.target.value),\n        type: \"number\",\n        step: 0.01,\n        pattern: \"[0-9]*\",\n        inputMode: \"numeric\",\n        className: \"mt-1 TransparentInput white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustButton, {\n      disabled: currReps > 0 ? false : true,\n      className: \"btn-lg w-50\",\n      text: \"COMPLETE SET\",\n      color: \"yellow\",\n      onClick: () => goToNextStep()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformWorkout, \"T9MbSX/hOl4twOymAarf6NKyW/A=\");\n_c = PerformWorkout;\nPerformWorkout.propTypes = {\n  next: PropTypes.func,\n  prev: PropTypes.func,\n  step: PropTypes.number,\n  goal: PropTypes.object,\n  currentWorkoutSets: PropTypes.number,\n  setCurrentWorkoutSets: PropTypes.func,\n  isCardio: PropTypes.bool,\n  setIsCardio: PropTypes.func,\n  completedWorkouts: PropTypes.array,\n  setCompletedWorkouts: PropTypes.func,\n  setSelectedWorkout: PropTypes.func\n};\nvar _c;\n$RefreshReg$(_c, \"PerformWorkout\");","map":{"version":3,"names":["PropTypes","useState","CustButton","jsxDEV","_jsxDEV","CARDIO_INDEX","PerformWorkout","_ref","_s","next","prev","step","goal","currentWorkoutSets","setCurrentWorkoutSets","isCardio","setIsCardio","completedWorkouts","setCompletedWorkouts","setSelectedWorkout","console","log","currReps","setCurrReps","generateGoalText","duration","toFixed","min_reps","max_reps","isGoalComplete","sets","goToNextStep","updatedCompletedWorkouts","map","val","indx","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","type","pattern","inputMode","disabled","text","color","onClick","_c","propTypes","func","number","object","bool","array","$RefreshReg$"],"sources":["/Users/jacobolivares/Documents/practice/gym_buddy/src/routes/Workout/components/steps/PerformWorkout.jsx"],"sourcesContent":["import PropTypes from \"prop-types\";\nimport { useState } from \"react\";\n\nimport { CustButton } from \"../../../../components\";\n\nconst CARDIO_INDEX = 0;\nexport const PerformWorkout = ({\n  next,\n  prev,\n  step,\n  goal,\n  currentWorkoutSets,\n  setCurrentWorkoutSets,\n  isCardio,\n  setIsCardio,\n  completedWorkouts,\n  setCompletedWorkouts,\n  setSelectedWorkout,\n}) => {\n  console.log(\n    next,\n    prev,\n    step,\n    goal,\n    currentWorkoutSets,\n    setCurrentWorkoutSets,\n    setCompletedWorkouts,\n    isCardio\n  );\n  const [currReps, setCurrReps] = useState(0.0);\n\n  const generateGoalText = () => {\n    return isCardio\n      ? `${(goal.duration / 60).toFixed(2)} mins`\n      : `${goal.min_reps} - ${goal.max_reps}`;\n  };\n\n  const isGoalComplete = () => {\n    return currentWorkoutSets > goal.sets;\n  };\n\n  // if isCardio is true, then we send the user to the SelectWorkout page\n  // if not, then we send the user to the TimerMode page\n  const goToNextStep = () => {\n    // send user to SelectWorkout page if they finish cardio OR if they complete the goal for their workout\n    if (isCardio) {\n      // need to update selectedWorkout since it does not get updated in Rest.jsx\n      setSelectedWorkout(null);\n      // need to update isCardio state\n      setIsCardio(false);\n      // need to make cardio finished after in completedWorkouts\n      const updatedCompletedWorkouts = completedWorkouts.map((val, indx) => {\n        if (indx === CARDIO_INDEX) {\n          return true;\n        }\n        return val;\n      });\n      setCompletedWorkouts(updatedCompletedWorkouts);\n\n      // need to update currentWorkoutSets\n      setCurrentWorkoutSets(0);\n\n      prev(2);\n    } else if (!isCardio && isGoalComplete()) {\n      // need to update the selectedWorkout state\n      // send user to SelectWorkout step\n      prev(2);\n    }\n    // we are not done with the current workout and it's not cardio\n    else {\n      next();\n    }\n  };\n  return (\n    <div className=\"d-block pt-5\">\n      <h2>Set {currentWorkoutSets}</h2>\n      <h3 className=\"mt-3\">Goal: {generateGoalText()}</h3>\n      <div className=\"my-5\">\n        <h3>{isCardio ? \"Enter Duration\" : \"Enter Reps\"}</h3>\n        <input\n          value={currReps}\n          onChange={(e) => setCurrReps(e.target.value)}\n          type=\"number\"\n          step={0.01}\n          pattern=\"[0-9]*\"\n          inputMode=\"numeric\"\n          className=\"mt-1 TransparentInput white\"\n        ></input>\n      </div>\n      <CustButton\n        disabled={currReps > 0 ? false : true}\n        className=\"btn-lg w-50\"\n        text=\"COMPLETE SET\"\n        color=\"yellow\"\n        onClick={() => goToNextStep()}\n      />\n    </div>\n  );\n};\n\nPerformWorkout.propTypes = {\n  next: PropTypes.func,\n  prev: PropTypes.func,\n  step: PropTypes.number,\n  goal: PropTypes.object,\n  currentWorkoutSets: PropTypes.number,\n  setCurrentWorkoutSets: PropTypes.func,\n  isCardio: PropTypes.bool,\n  setIsCardio: PropTypes.func,\n  completedWorkouts: PropTypes.array,\n  setCompletedWorkouts: PropTypes.func,\n  setSelectedWorkout: PropTypes.func,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}